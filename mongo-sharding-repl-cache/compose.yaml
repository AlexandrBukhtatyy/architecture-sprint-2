name: sharding-repl-cache
  
services:
  ##############################################################################
  # Приложение
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router1
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.33
    environment:
      MONGODB_URL: "mongodb://mongos_router1:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"
  
  ##############################################################################
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.2
  
  ##############################################################################
  # сервер конфигурации
  configSrv:
    image: mongo:latest
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck: &mongo-healthcheck
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  ##############################################################################
  # 1-й роутер
  mongos_router1:
    image: mongo:latest
    container_name: mongos_router1
    restart: always
    ports:
      - "27018:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      <<: *mongo-healthcheck

  # 1-й шард
  shard1_r0:
    image: mongo:latest
    container_name: shard1_r0
    restart: always
    ports:
      - "27019:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1_r0-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      <<: *mongo-healthcheck

  shard1_r1:
    image: mongo:latest
    container_name: shard1_r1
    restart: always
    ports:
      - "27020:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard1_r1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1_r2:
    image: mongo:latest
    container_name: shard1_r2
    restart: always
    ports:
      - "27021:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard1_r2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      <<: *mongo-healthcheck

  ##############################################################################
  # 2-й роутер
  mongos_router2:
    image: mongo:latest
    container_name: mongos_router2
    restart: always
    ports:
      - "27022:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/configSrv:27017",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      <<: *mongo-healthcheck

  # 2-й шард
  shard2_r0:
    image: mongo:latest
    container_name: shard2_r0
    restart: always
    ports:
      - "27023:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.16
    volumes:
      - shard2_r0-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      <<: *mongo-healthcheck
  
  shard2_r1:
    image: mongo:latest
    container_name: shard2_r1
    restart: always
    ports:
      - "27024:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.17
    volumes:
      - shard2_r1-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      <<: *mongo-healthcheck
  
  shard2_r2:
    image: mongo:latest
    container_name: shard2_r2
    restart: always
    ports:
      - "27025:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.18
    volumes:
      - shard2_r2-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      <<: *mongo-healthcheck

##############################################################################
networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  redis_data: {}
  config-data:
  mongos_router1:
  mongos_router2:
  shard1_r0-data:
  shard1_r1-data:
  shard1_r2-data:
  shard2_r0-data:
  shard2_r1-data:
  shard2_r2-data:
